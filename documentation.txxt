Test Assignment
----------------
Create a small e-learning platform that provides information for 50% of enrolled students that completed the assignment. 
and 60% of students that they are enrolled at the assignment.

Stack
-----
Laravel
mysql 
taiwind css 
bootstrap

How to run the application
--------------------------
-run in terminal: composer install
-create an .env and define database

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=sqeclass
DB_USERNAME=root
DB_PASSWORD=

run php server
--------------
run at terminal: php artisan serve to set php server

define tables at the database
------------------------------
run at terminal: php artisan migrate

The project follows MVC architecture. So let me define the project structure.

I have define routing at root folder, a file that handles the routing 

--- /
-
-
-------- web.php

Controllers have defined inside the http folder to handle method logic for the web application.

--- App
-
-
------Http
-
-
--------Controllers    
-
-
-----------CoursesController.php

In the e-class app, i have defined elequent models that define the relationships of tables into the database.

---App
-
-
-----Http
-
-
------Models
-
-
-------Courses
-
-
--------Students
-
-
--------Enrollments
-
-
---------Completions

I have defined migrations, in order to generate tables. So inside migrations i've defined 
types of colums for the tables.

---database
-
-
---migrations
-
-
----courses_table
-
-
----students_table
-
-
-----course_students_table

The models are defined from many to many relationships and between the tables at the datatabase.
Laravel enables generating dummy data for eloquent model. This operations is handled by factories.
I generating factories for each corresponding model.

---Database
-
-
----Factories
-
-
-----CoursesFactory
-
-
------CourseStudentFactory
-
-
-------StudentsFactory

When factories are defined, seeders can generate dummy data  at the database.

---Database
-
-
----seeders
-
-
-------DatabaseSeeder.php


display Courses 
----------------
I defined a get route in order to index the courses.
I defined a logic in coursesController that returns a view for courses where I loop the courses.
This view has a table structure at the frontend.
Also i have applied a difficulty information for the course ant there is a button where you can browse a specific course.
I have seeded the database with dummy and fetch the data from migration columns and display them at the view.

show a course
------------- 
I defined a new get route where I defined a course endpoint and a slug parameter for course.
This view holds different components, as i tried to experiment with frontend structure.

Repository Pattern
------------------
I attempt to refactor the controller applying the repository pattern.
I created a Repository folder at the:

---App
-
-
---Http
-
-
---Repositories
-
-
---CourseRepository 

Repository applies an middle layer at the controller in order to hold and provide the logic of created methods at the controller.
At the repository, i have created significant methods (get, show, etc) for basi CRUD operations.


Your platform must have the following entities (Models):
    1. Courses
    2. Students
    3. Enrolments
    4. Completions
Mission
    • Create a web application (using your favorite framework or not).
    • Create your entities (models). Think carefully and define the appropriate properties.
    • Seed your entities with dummy data.
    • Create:
        ◦ Courses.
        ◦ Students.
        ◦ Enrol 60% of the students to courses randomly.
        ◦ Mark 50% of enrolled users as completed.
Finally
    • Create a documentation file using markdown language in project root folder.
    • Create a git repository.
    • Push the app and share it with us (psoukiouroglou@sqlearn.com).





